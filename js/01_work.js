// 1._____________________________________________________________________________
// Використовуючи функцію if...else,
// напишіть код, який запитуватиме:
// "Яка офіційна назва JavaScript?"
// Якщо користувач вводить "ECMAScript",
// показати через alert: "Вірно!"
// інакше відобразити:"Не знаєте? ECMAScript!"

// const question = prompt("Яка офіційна назва JavaScript?");
// console.log(question, typeof question);
// if (question === "ECMAScript") {
//     alert("Вірно!");
// } else {
//     alert("Не знаєте? ECMAScript!");
// }
// ________________________________________________________________________________
// 2.______________________________________________________________________________
// Напишіть програму, яка отримає від користувача
// число (кількість хвилин) і виведе у консоль
// Рядок у форматі годин і хвилин 01:10
// 70 === 01:10
// Отримайте кількість хвилин -
// let minutes = parseInt(prompt("Введіть кількість хвилин:"));
// Візіміть ціле від ділення на 60, це кількість годин
// let hours = Math.floor(minutes / 60);
// Обробіть години так щоб відповідали формату
// minutes = minutes % 60;
// Візіміть залишок від ділення на 60, це кількість хвилин
// Обробіть хвилини так щоб відповідали формату
// let hoursStr = hours.toString().padStart(2, "0");
// let minutesStr = minutes.toString().padStart(2, "0");
// Вивести результат
// console.log(hoursStr + ":" + minutesStr);
// __________________________________________________________________________________
// 3.________________________________________________________________________________
// Напишіть цикл, котрий виводить в консоль
// числа від max до min по убуванню

// const max = 50;
// const min = 23;
// for (let i = max; i >= min; i--) {
//     console.log(i);
// }
// Виведіть в консоль всі парні числа від min до max
// for (let i = min; i <= max; i++) {
//     if (i % 2 === 0) {
//     console.log(i);
//     }
// }
// ___________________________________________________________________________________
// 4._________________________________________________________________________________
// За допомогою циклу for отримайте
// сумму всіх парних чисел від min до max(включно)

// const max = 10;
// const min = 0;
// Додайте щось :)
// Створіть цикл з правильною умовою
// Рахуйте сумму в середині циклу
// let sum = 0;
// for (let i = min; i <= max; i++) {
//     if (i % 2 === 0) {
//     sum += i;
//     }
// }
// console.log("Сума всіх парних чисел : " + sum);
// ____________________________________________________________________________________
// 5.__________________________________________________________________________________
// Напишіть код, який запитуватиме
// Логін за допомогою prompt і логувати результат
// В консоль браузера
// Якщо відвідувач вводить "admin",
// то наступний prompt запитує пароль,
// інакше (нічого не ввели або натиснута клавіша Esc)
// вивести рядок "Я вас не знаю".
// Якщо на запит паролю нічого не ввели або
// натиснута клавіша Esc
// Вивести рядок "Скасовано"
// Пароль перевіряти так:
// Якщо введено пароль "password",
// то вивести рядок "Здрастуйте!"
// інакше виводити рядок "Невірний пароль!"
// const loginInput = prompt('Введіть свій логін', 'admin');
// if (loginInput === "admin") {
//     const passwordInput = prompt("Введіть свій пароль", "");
//     if (passwordInput === "password") {
//     console.log("Здрастуйте!");
//     } else if (passwordInput === "" || passwordInput === null) {
//     console.log("Скасовано");
//     } else {
//     console.log("Невірний пароль!");
//     }
// } else if (loginInput === "" || loginInput === null) {
//     console.log("Я вас не знаю");
// } else {
//     console.log("Я вас не знаю");
// }
// ______________________________________________________________________________
// 6.____________________________________________________________________________
// При завантаженні сторінки користувачеві пропонується
// в prompt ввести число.
// Значення додається до значення змінної total.
// Операція введення числа триває до того часу,
// Поки користувач не натисне кнопку Cancel в prompt або Esc.
// Після того як користувач припинив введення, натиснувши на
// кнопку Cancel, показати alert з рядком
// "Загальна сума введених чисел дорівнює [число]."
// Робити перевірку, що користувач ввів саме число,
// а чи не довільний набір символів, не потрібно.
// let total = 0;
// while (true) {
// const input = prompt('Введіть число', '');
// if (input === '' || input === null) {
// break;
// }
// const number = Number(input);
// if (!isNaN(number)) {
// total += number;
// }
// }
// alert(`Загальна сума введених чисел дорівнює ${total}.`);
// _______________________________________________________________________________
// 7._____________________________________________________________________________
// Напишіть цикл, який пропонує ввести
// число більше 100 через prompt.
// Якщо відвідувач ввів інше число - попросити
// Ввести ще раз і так далі.
// Цикл повинен запитувати число, поки відвідувач не
// введе число більше 100, або натисне кнопку
// Скасування в prompt
// while vs do..while
// let num;
// do {
//     num = prompt("Введіть число більше 100", 0);
// } while (num <= 100 && num != null);
// if (num != null) {
//     alert(`Ви ввели число: ${num}`);
// } else {
//     alert("Операція скасована!");
// }
// ____________________________________________________________________________________
// 8.__________________________________________________________________________________
// У змінній min лежить число від 0 до 59.
// Визначте, в яку чверть години потрапляє
// це число(у першу, другу, третю чи четверту).
// 1.	Визначити номер хвилини в годині, для цього від числа min віднімаємо кількість
//  повних годин, тобто min % 60.
// 2.	Розділити хвилини на 15 і отримати номер чверті.
// 3.	Вивести відповідний текстовий опис чверті.
// let min = 14;
// let minuteInHour = min % 60; // визначаємо номер хвилини в годині
// let quarter = Math.floor(minuteInHour / 15) + 1; // визначаємо номер чверті
// if (quarter === 1) {
//     console.log("Це перша чверть години");
// } else if (quarter === 2) {
//     console.log("Це друга чверть години");
// } else if (quarter === 3) {
//     console.log("Це третя чверть години");
// } else {
//     console.log("Це четверта чверть години");
// }
// _____________________________________________________________________________________
// 9.___________________________________________________________________________________
// Дано рядок, що складається із символів, наприклад, 'abcde'.
// Перевірте, що першим символом цього рядка є буква 'a'.
// Якщо це так - виведіть 'так', інакше виведіть 'ні'.
// let str = "abcde";
// if (str.charAt(0) === "a") {
//     console.log("так");
// } else {
//     console.log("ні");
// }
// _____________________________________________________________________________________
// 10.__________________________________________________________________________________
// За кожен місяць податкова нараховує на ЗП розробника 5% від суми.
// Напишіть консольну функцію, на яку користувач вводить суму зп
// і кількість місяців з допомогою prompt() не забуваємо, що промпт повертає рядок.
// А податкова обчислює кінцеву суму зп без податків протягом року,
// Суму податків всього і чистий дохід розробника за кожен місяць.
// Для обчислення суми з урахуванням відсотків використовуйте цикл for.
// function calculateSalary() {
//     let salary = parseFloat(prompt("Введіть заробітну плату:"));
//     let months = parseInt(prompt("Введіть кількість місяців:"));
//     let totalSalary = 0;
//     let totalTax = 0;
//     for (let i = 1; i <= months; i++) {
//     let monthlySalary = salary * 1.05;
//     let tax = monthlySalary - salary;
//     totalSalary += salary;
//     totalTax += tax;
//     salary = monthlySalary;
//     console.log(`Місяць ${i}:
//     ЗП без податків - ${salary.toFixed(2)} грн, Податки - ${tax.toFixed(2)} грн,
//     Чистий дохід - ${totalSalary.toFixed(2)} грн`);
//     }
//     console.log(`Загальна зарплата за ${months}
//     місяців: ${totalSalary.toFixed(2)} грн`);
//     console.log(`Загальна сума податків за ${months}
//     місяців: ${totalTax.toFixed(2)} грн`);
// }
// calculateSalary();
// _____________________________________________________________________________________
// 11.__________________________________________________________________________________
// Напишіть через switch пошуку автора мови програмування
// пишемо назву мови у шаблонному рядку отримує відповідь мова та автор
// PHP - Расмус Лердорф
// C# -група інженерів компанії Microsoft під керівництвом
// Андерса Хейлсберга та Скотта Вільтаумота
// Swift - Кріс Латтнер
// JS - Брендан Ейх
// Java - Джеймс Гослінг
// Python - Гвідо ван Россум
// function getLanguageAuthor(language) {
//     switch (language) {
//     case "PHP":
//     return "Расмус Лердорф";
//     case "C#":
//     return "група інженерів компанії Microsoft під керівництвом Андерса Хейлсберга та Скотта Вільтаумота";
//     case "Swift":
//     return "Кріс Латтнер";
//     case "JS":
//     return "Брендан Ейх";
//     case "Java":
//     return "Джеймс Гослінг";
//     case "Python":
//     return "Гвідо ван Россум";
//     default:
//     return "Невідома мова програмування";
//     }
// }
// ________________________________________________________________________________________
// 12._____________________________________________________________________________________
// Записати масив, const arr = ["BEST", "the", "foo", "is", "JS"]
// Розгорнути масив,
// вирізати foo,
// Перевести його в рядок розділений пробілами
// const arr = ["BEST", "the", "foo", "is", "JS"];
// const expandedArr = [...arr];
      // розгортаємо масив за допомогою spread
// const removedElement = expandedArr.splice(2, 1)[0];
      // вирізаємо елемент "foo"
// const joinedString = expandedArr.join(" ");
     // перетворюємо масив в рядок
// console.log(expandedArr);
     // ["BEST", "the", "is", "JS"]
// console.log(removedElement);
     // "foo"
// console.log(joinedString);
      // "BEST the is JS"
// ________________________________________________________________________________________

// M3-4 Приклад 1.+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Напиши скрипт, який для об'єкта user,
// послідовно:
// 1 додасть поле mood зі значенням 'happy'
// 2 замінить hobby на 'skydiving'
// 3 замінить значення premium на false
// 4 виводить вміст об'єкта users у форматі
// "ключ: значення" - використовуючи Object.keys () і for ... of

// const user = {
//     name: "John",
//     age: 20,
//     hobby: "tenis",
//     premium: true,
// };
// user.mood = "happy";
// user.hobby = "skydiving";
// user.premium = false;
// for (const key of Object.keys(user)) {
//     console.log(`${key}: ${user[key]}`);
// }

// M3-4 Приклад 2.++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// У нас є об'єкт, у якому зберігатимуться зарплати
// нашої команди
// Напишіть код для сумування всіх зарплат і
// Збережіть його результат у змінній total.
// Якщо об'єкт salaries порожній, результат має бути 0
// const salaries = {
//     Mango: 100,
//     Poly: 160,
//     Ajax: 1470,
// };
// let total = 0;
// for (const key in salaries) {
//     total += salaries[key];
// }
// console.log(total);

// M3-4 Приклад 3.++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Напишіть ф-цію calcTotalCost(stones, stonesName),
// яка приймає масив об'єктів і
// Рядок з назвою каменю.
// Функція вважає, що м повертає загальну вартість каменів
// з таким ім'ям, ціною та кількістю з об'єкта
// const stones = [
//     { name: "Смарагд", cost: 1300, quantity: 4 },
//     { name: "Діамант", cost: 2700, quantity: 6 },
//     { name: "Сапфір", cost: 400, quantity: 7 },
//     { name: "Щебінь", cost: 150, quantity: 100 },
// ];
// const calcTotalCost = (stones, stonesName) => {
//     let totalCost = 0;
//     for (const stone of stones) {
//     if (stone.name === stonesName) {
//       totalCost = stone.cost * stone.quantity;
//     break;
//     }
//     }
//     return totalCost;
// };
// console.log(calcTotalCost(stones, "Діамант"));

// M3-4 Приклад 4.++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Створіть об'єкт calculator із трьома методами
// read(a, b) - приймає два аргументи та зберігає їх
// як властивості об'єкта
// sum() повертає суму збережених значень
// mult() перемножує збережені значення та повертає результат
// const calculator = {
//     read(a, b) {
//     this.a = a;
//     this.b = b;
//     return this;
//     },
//     sum() {
//     return this.a + this.b;
//     },
//     mult() {
//     return this.a * this.b;
//     },
// };
// console.log(calculator.read(2, 3).sum().mult());

// M3-4 Приклад 5.++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Напишіть функцію updateObject, яка приймає об'єкт та повертає
// новий об'єкт без зазначеного параметра
// Очікуваний результат ({a: 1, b: 2}, 'b') => {a: 1}
// const updateObject = (obj, removeKey) => {
           // Створити новий об'єкт, щоб не змінювати вхідний об'єкт
    // const newObj = { ...obj };
           // Видалити ключ
    // delete newObj[removeKey];
           // Повернути новий об'єкт
//     return newObj;
// };

//5.1 Напишіть функцію updateObject, яка приймає об'єкт та повертає
//новий об'єкт без зазначених параметрів
//Очікуваний результат ({a: 1, b: 2, c: 3}, 'b', 'a') => {c: 3}
// const updateObject2 = (obj, ...removeKeys) => {
//     const newObj = { ...obj };
//     removeKeys.forEach(key => delete newObj[key]);
//     return newObj;
// };
// const res = updateObject2({ a: 1, b: 2, c: 3 }, `b`, `a`);
// console.log(res);

// M3-4 Приклад 6.++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Напишіть функцію, яка приймає як параметр об'єкт
// і формує властивості об'єкта
// у новому масиві у форматі [key, value]
// [["name","John"],["surName","Stones"],...]
// const user = {
//     name: "John",
//     surName: "Stones",
//     age: 20,
//     hobby: "tenis",
//     haveCar: true,
//     merried: false,
//     };function changeObject(obj) {
//     return Object.entries(obj);
// }
// const result = changeObject(user);
// console.log(result);
// [["name","John"],["surName","Stones"],...]

// M3-4 Приклад 7.++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Написати скрипт керування особистим кабінетом інтернет банка
// Є об'ект account в якому треба реалізувати
// методи для работы з балансом і історією транзакцій
// Типів транзакцій лише два.
// Можна положить або зняти гроші на/з рахунку

// const Transaction = {
//     DEPOSIT: "deposit",
//     WITHDRAW: "withdraw",
// };
      // Кожна транзакція то є об'єкт з властивостями: 
      // id, type, amount, transactionStatus
const account = {
  // поточний баланс
    _balance: 0,
  // Поточний id транзакції
    _curID: 0,
  // Історія транзакцій
    _transactions: [],
  // Метод створює і повертає об'єкт транзакції
  // Приймає суму, тип і статус транзакциї
    createTransaction(type, amount, transactionStatus) {
    const transaction = {   
    id: this._curID++,
    type,
    amount,
    transactionStatus,
    };
    return transaction;
    },
  // Метод для додавання суми на баланс.
  // Приймає суму транцакції.
  // Викликає createTransaction для створення об'єкта транзакції
  // опісля додає його до історії транзакцій
    deposit(amount) {
    const transaction = this.createTransaction(
    Transaction.DEPOSIT,
    amount,
    "success"
    );
    this._transactions.push(transaction);
    this._balance += amount;
    },
  // Метод для зняття суми з балансу.
  // Приймає суму транцакції.
  // Викликає createTransaction для створення об'єкта транзакції
  // опісля додає його до історії транзакцій
  // Якщо amount більше за потчний баланс, виводим сповіщення про,
  // недостатню кількість коштів на рахунку
    withdraw(amount) {
    if (this._balance < amount) {
    const transaction = this.createTransaction(
        Transaction.WITHDRAW,
        amount,
        "error"
    );
    this._transactions.push(transaction);
    console.log("Not enough funds in the account");
    } else {
    const transaction = this.createTransaction(
        Transaction.WITHDRAW,
        amount,
        "success"
    );
    this._transactions.push(transaction);
    this._balance -= amount;
    } 
    },
  // Метод повертає текущий баланс
    getBalance() {
    return this._balance; // code here
    },
  // Метод шукає і повертає об'єкт транзакції за id
    getTransactionDetails(id) {
    const transaction = this._transactions.find(
    (transaction) => transaction.id === id
    );
    return transaction ? transaction : "Transaction not found";
    },
  // Метод повертає кількість коштів визначеного типу
  // транзакції з всієї історії транзакцій
    getTransactionType(type) {
    const transactions = this._transactions.filter(
    (transaction) => transaction.type === type
    );
    const totalAmount = transactions.reduce(
    (total, transaction) => total + transaction.amount,
    0
    );
    return totalAmount; 
    },
};




